/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ArbitrumNodeInterfaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "constructOutboxProof"
      | "estimateRetryableTicket"
      | "findBatchContainingBlock"
      | "gasEstimateComponents"
      | "gasEstimateL1Component"
      | "getL1Confirmations"
      | "legacyLookupMessageBatchProof"
      | "nitroGenesisBlock"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "constructOutboxProof",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateRetryableTicket",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "findBatchContainingBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gasEstimateComponents",
    values: [AddressLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gasEstimateL1Component",
    values: [AddressLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getL1Confirmations",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "legacyLookupMessageBatchProof",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nitroGenesisBlock",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "constructOutboxProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateRetryableTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findBatchContainingBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasEstimateComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasEstimateL1Component",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL1Confirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "legacyLookupMessageBatchProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nitroGenesisBlock",
    data: BytesLike
  ): Result;
}

export interface ArbitrumNodeInterface extends BaseContract {
  connect(runner?: ContractRunner | null): ArbitrumNodeInterface;
  waitForDeployment(): Promise<this>;

  interface: ArbitrumNodeInterfaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  constructOutboxProof: TypedContractMethod<
    [size: BigNumberish, leaf: BigNumberish],
    [
      [string, string, string[]] & {
        send: string;
        root: string;
        proof: string[];
      }
    ],
    "view"
  >;

  estimateRetryableTicket: TypedContractMethod<
    [
      sender: AddressLike,
      deposit: BigNumberish,
      to: AddressLike,
      l2CallValue: BigNumberish,
      excessFeeRefundAddress: AddressLike,
      callValueRefundAddress: AddressLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  findBatchContainingBlock: TypedContractMethod<
    [blockNum: BigNumberish],
    [bigint],
    "view"
  >;

  gasEstimateComponents: TypedContractMethod<
    [to: AddressLike, contractCreation: boolean, data: BytesLike],
    [
      [bigint, bigint, bigint, bigint] & {
        gasEstimate: bigint;
        gasEstimateForL1: bigint;
        baseFee: bigint;
        l1BaseFeeEstimate: bigint;
      }
    ],
    "payable"
  >;

  gasEstimateL1Component: TypedContractMethod<
    [to: AddressLike, contractCreation: boolean, data: BytesLike],
    [
      [bigint, bigint, bigint] & {
        gasEstimateForL1: bigint;
        baseFee: bigint;
        l1BaseFeeEstimate: bigint;
      }
    ],
    "payable"
  >;

  getL1Confirmations: TypedContractMethod<
    [blockHash: BytesLike],
    [bigint],
    "view"
  >;

  legacyLookupMessageBatchProof: TypedContractMethod<
    [batchNum: BigNumberish, index: BigNumberish],
    [
      [
        string[],
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        proof: string[];
        path: bigint;
        l2Sender: string;
        l1Dest: string;
        l2Block: bigint;
        l1Block: bigint;
        timestamp: bigint;
        amount: bigint;
        calldataForL1: string;
      }
    ],
    "view"
  >;

  nitroGenesisBlock: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "constructOutboxProof"
  ): TypedContractMethod<
    [size: BigNumberish, leaf: BigNumberish],
    [
      [string, string, string[]] & {
        send: string;
        root: string;
        proof: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "estimateRetryableTicket"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      deposit: BigNumberish,
      to: AddressLike,
      l2CallValue: BigNumberish,
      excessFeeRefundAddress: AddressLike,
      callValueRefundAddress: AddressLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "findBatchContainingBlock"
  ): TypedContractMethod<[blockNum: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "gasEstimateComponents"
  ): TypedContractMethod<
    [to: AddressLike, contractCreation: boolean, data: BytesLike],
    [
      [bigint, bigint, bigint, bigint] & {
        gasEstimate: bigint;
        gasEstimateForL1: bigint;
        baseFee: bigint;
        l1BaseFeeEstimate: bigint;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "gasEstimateL1Component"
  ): TypedContractMethod<
    [to: AddressLike, contractCreation: boolean, data: BytesLike],
    [
      [bigint, bigint, bigint] & {
        gasEstimateForL1: bigint;
        baseFee: bigint;
        l1BaseFeeEstimate: bigint;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getL1Confirmations"
  ): TypedContractMethod<[blockHash: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "legacyLookupMessageBatchProof"
  ): TypedContractMethod<
    [batchNum: BigNumberish, index: BigNumberish],
    [
      [
        string[],
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        proof: string[];
        path: bigint;
        l2Sender: string;
        l1Dest: string;
        l2Block: bigint;
        l1Block: bigint;
        timestamp: bigint;
        amount: bigint;
        calldataForL1: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nitroGenesisBlock"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
