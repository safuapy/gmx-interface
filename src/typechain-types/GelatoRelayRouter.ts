/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type ExternalCallsStruct = {
  sendTokens: AddressLike[];
  sendAmounts: BigNumberish[];
  externalCallTargets: AddressLike[];
  externalCallDataList: BytesLike[];
  refundTokens: AddressLike[];
  refundReceivers: AddressLike[];
};

export type ExternalCallsStructOutput = [
  sendTokens: string[],
  sendAmounts: bigint[],
  externalCallTargets: string[],
  externalCallDataList: string[],
  refundTokens: string[],
  refundReceivers: string[]
] & {
  sendTokens: string[];
  sendAmounts: bigint[];
  externalCallTargets: string[];
  externalCallDataList: string[];
  refundTokens: string[];
  refundReceivers: string[];
};

export type TokenPermitStruct = {
  owner: AddressLike;
  spender: AddressLike;
  value: BigNumberish;
  deadline: BigNumberish;
  v: BigNumberish;
  r: BytesLike;
  s: BytesLike;
  token: AddressLike;
};

export type TokenPermitStructOutput = [
  owner: string,
  spender: string,
  value: bigint,
  deadline: bigint,
  v: bigint,
  r: string,
  s: string,
  token: string
] & {
  owner: string;
  spender: string;
  value: bigint;
  deadline: bigint;
  v: bigint;
  r: string;
  s: string;
  token: string;
};

export type FeeParamsStruct = {
  feeToken: AddressLike;
  feeAmount: BigNumberish;
  feeSwapPath: AddressLike[];
};

export type FeeParamsStructOutput = [
  feeToken: string,
  feeAmount: bigint,
  feeSwapPath: string[]
] & { feeToken: string; feeAmount: bigint; feeSwapPath: string[] };

export type RelayParamsStruct = {
  oracleParams: OracleUtils.SetPricesParamsStruct;
  externalCalls: ExternalCallsStruct;
  tokenPermits: TokenPermitStruct[];
  fee: FeeParamsStruct;
  userNonce: BigNumberish;
  deadline: BigNumberish;
  signature: BytesLike;
};

export type RelayParamsStructOutput = [
  oracleParams: OracleUtils.SetPricesParamsStructOutput,
  externalCalls: ExternalCallsStructOutput,
  tokenPermits: TokenPermitStructOutput[],
  fee: FeeParamsStructOutput,
  userNonce: bigint,
  deadline: bigint,
  signature: string
] & {
  oracleParams: OracleUtils.SetPricesParamsStructOutput;
  externalCalls: ExternalCallsStructOutput;
  tokenPermits: TokenPermitStructOutput[];
  fee: FeeParamsStructOutput;
  userNonce: bigint;
  deadline: bigint;
  signature: string;
};

export type UpdateOrderParamsStruct = {
  key: BytesLike;
  sizeDeltaUsd: BigNumberish;
  acceptablePrice: BigNumberish;
  triggerPrice: BigNumberish;
  minOutputAmount: BigNumberish;
  validFromTime: BigNumberish;
  autoCancel: boolean;
  executionFeeIncrease: BigNumberish;
};

export type UpdateOrderParamsStructOutput = [
  key: string,
  sizeDeltaUsd: bigint,
  acceptablePrice: bigint,
  triggerPrice: bigint,
  minOutputAmount: bigint,
  validFromTime: bigint,
  autoCancel: boolean,
  executionFeeIncrease: bigint
] & {
  key: string;
  sizeDeltaUsd: bigint;
  acceptablePrice: bigint;
  triggerPrice: bigint;
  minOutputAmount: bigint;
  validFromTime: bigint;
  autoCancel: boolean;
  executionFeeIncrease: bigint;
};

export type BatchParamsStruct = {
  createOrderParamsList: IBaseOrderUtils.CreateOrderParamsStruct[];
  updateOrderParamsList: UpdateOrderParamsStruct[];
  cancelOrderKeys: BytesLike[];
};

export type BatchParamsStructOutput = [
  createOrderParamsList: IBaseOrderUtils.CreateOrderParamsStructOutput[],
  updateOrderParamsList: UpdateOrderParamsStructOutput[],
  cancelOrderKeys: string[]
] & {
  createOrderParamsList: IBaseOrderUtils.CreateOrderParamsStructOutput[];
  updateOrderParamsList: UpdateOrderParamsStructOutput[];
  cancelOrderKeys: string[];
};

export declare namespace OracleUtils {
  export type SetPricesParamsStruct = {
    tokens: AddressLike[];
    providers: AddressLike[];
    data: BytesLike[];
  };

  export type SetPricesParamsStructOutput = [
    tokens: string[],
    providers: string[],
    data: string[]
  ] & { tokens: string[]; providers: string[]; data: string[] };
}

export declare namespace IBaseOrderUtils {
  export type CreateOrderParamsAddressesStruct = {
    receiver: AddressLike;
    cancellationReceiver: AddressLike;
    callbackContract: AddressLike;
    uiFeeReceiver: AddressLike;
    market: AddressLike;
    initialCollateralToken: AddressLike;
    swapPath: AddressLike[];
  };

  export type CreateOrderParamsAddressesStructOutput = [
    receiver: string,
    cancellationReceiver: string,
    callbackContract: string,
    uiFeeReceiver: string,
    market: string,
    initialCollateralToken: string,
    swapPath: string[]
  ] & {
    receiver: string;
    cancellationReceiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialCollateralToken: string;
    swapPath: string[];
  };

  export type CreateOrderParamsNumbersStruct = {
    sizeDeltaUsd: BigNumberish;
    initialCollateralDeltaAmount: BigNumberish;
    triggerPrice: BigNumberish;
    acceptablePrice: BigNumberish;
    executionFee: BigNumberish;
    callbackGasLimit: BigNumberish;
    minOutputAmount: BigNumberish;
    validFromTime: BigNumberish;
  };

  export type CreateOrderParamsNumbersStructOutput = [
    sizeDeltaUsd: bigint,
    initialCollateralDeltaAmount: bigint,
    triggerPrice: bigint,
    acceptablePrice: bigint,
    executionFee: bigint,
    callbackGasLimit: bigint,
    minOutputAmount: bigint,
    validFromTime: bigint
  ] & {
    sizeDeltaUsd: bigint;
    initialCollateralDeltaAmount: bigint;
    triggerPrice: bigint;
    acceptablePrice: bigint;
    executionFee: bigint;
    callbackGasLimit: bigint;
    minOutputAmount: bigint;
    validFromTime: bigint;
  };

  export type CreateOrderParamsStruct = {
    addresses: IBaseOrderUtils.CreateOrderParamsAddressesStruct;
    numbers: IBaseOrderUtils.CreateOrderParamsNumbersStruct;
    orderType: BigNumberish;
    decreasePositionSwapType: BigNumberish;
    isLong: boolean;
    shouldUnwrapNativeToken: boolean;
    autoCancel: boolean;
    referralCode: BytesLike;
  };

  export type CreateOrderParamsStructOutput = [
    addresses: IBaseOrderUtils.CreateOrderParamsAddressesStructOutput,
    numbers: IBaseOrderUtils.CreateOrderParamsNumbersStructOutput,
    orderType: bigint,
    decreasePositionSwapType: bigint,
    isLong: boolean,
    shouldUnwrapNativeToken: boolean,
    autoCancel: boolean,
    referralCode: string
  ] & {
    addresses: IBaseOrderUtils.CreateOrderParamsAddressesStructOutput;
    numbers: IBaseOrderUtils.CreateOrderParamsNumbersStructOutput;
    orderType: bigint;
    decreasePositionSwapType: bigint;
    isLong: boolean;
    shouldUnwrapNativeToken: boolean;
    autoCancel: boolean;
    referralCode: string;
  };
}

export interface GelatoRelayRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR_NAME_HASH"
      | "DOMAIN_SEPARATOR_TYPEHASH"
      | "DOMAIN_SEPARATOR_VERSION_HASH"
      | "batch"
      | "cancelOrder"
      | "createOrder"
      | "dataStore"
      | "eventEmitter"
      | "externalHandler"
      | "oracle"
      | "orderHandler"
      | "orderVault"
      | "router"
      | "updateOrder"
      | "userNonces"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR_NAME_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR_VERSION_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batch",
    values: [RelayParamsStruct, AddressLike, BatchParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [RelayParamsStruct, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [
      RelayParamsStruct,
      AddressLike,
      IBaseOrderUtils.CreateOrderParamsStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "dataStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eventEmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "externalHandler",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "orderHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orderVault",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateOrder",
    values: [RelayParamsStruct, AddressLike, UpdateOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "userNonces",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR_NAME_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR_VERSION_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "externalHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userNonces", data: BytesLike): Result;
}

export interface GelatoRelayRouter extends BaseContract {
  connect(runner?: ContractRunner | null): GelatoRelayRouter;
  waitForDeployment(): Promise<this>;

  interface: GelatoRelayRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR_NAME_HASH: TypedContractMethod<[], [string], "view">;

  DOMAIN_SEPARATOR_TYPEHASH: TypedContractMethod<[], [string], "view">;

  DOMAIN_SEPARATOR_VERSION_HASH: TypedContractMethod<[], [string], "view">;

  batch: TypedContractMethod<
    [
      relayParams: RelayParamsStruct,
      account: AddressLike,
      params: BatchParamsStruct
    ],
    [string[]],
    "nonpayable"
  >;

  cancelOrder: TypedContractMethod<
    [relayParams: RelayParamsStruct, account: AddressLike, key: BytesLike],
    [void],
    "nonpayable"
  >;

  createOrder: TypedContractMethod<
    [
      relayParams: RelayParamsStruct,
      account: AddressLike,
      params: IBaseOrderUtils.CreateOrderParamsStruct
    ],
    [string],
    "nonpayable"
  >;

  dataStore: TypedContractMethod<[], [string], "view">;

  eventEmitter: TypedContractMethod<[], [string], "view">;

  externalHandler: TypedContractMethod<[], [string], "view">;

  oracle: TypedContractMethod<[], [string], "view">;

  orderHandler: TypedContractMethod<[], [string], "view">;

  orderVault: TypedContractMethod<[], [string], "view">;

  router: TypedContractMethod<[], [string], "view">;

  updateOrder: TypedContractMethod<
    [
      relayParams: RelayParamsStruct,
      account: AddressLike,
      params: UpdateOrderParamsStruct
    ],
    [void],
    "nonpayable"
  >;

  userNonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR_NAME_HASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR_VERSION_HASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "batch"
  ): TypedContractMethod<
    [
      relayParams: RelayParamsStruct,
      account: AddressLike,
      params: BatchParamsStruct
    ],
    [string[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelOrder"
  ): TypedContractMethod<
    [relayParams: RelayParamsStruct, account: AddressLike, key: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createOrder"
  ): TypedContractMethod<
    [
      relayParams: RelayParamsStruct,
      account: AddressLike,
      params: IBaseOrderUtils.CreateOrderParamsStruct
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dataStore"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "eventEmitter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "externalHandler"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "orderHandler"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "orderVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateOrder"
  ): TypedContractMethod<
    [
      relayParams: RelayParamsStruct,
      account: AddressLike,
      params: UpdateOrderParamsStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userNonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  filters: {};
}
